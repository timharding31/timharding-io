{"version":3,"sources":["images/gg_bridge.png","images/uss_constitution.png","files/tim_harding_resume.pdf","components/header.jsx","components/content/resume.jsx","components/main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","gg","require","uss","className","id","style","backgroundImage","to","href","target","src","exact","path","component","Resume","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,8C,kHCA3CD,EAAOC,QAAU,IAA0B,gD,4FCErCC,EAAKC,EAAQ,IACbC,EAAMD,EAAQ,IAEL,oBACb,4BAAQE,UAAU,sBAChB,yBAAKC,GAAG,aAAaC,MAAO,CAAEC,gBAAgB,QAAD,OAAUN,EAAV,SAC7C,yBAAKG,UAAU,mBACb,4BAAI,kBAAC,IAAD,CAAMI,GAAG,KAAT,gBACJ,iDAEF,yBAAKH,GAAG,kBACN,2BAAG,kBAAC,IAAD,CAAMG,GAAG,WAAT,WACH,2BAAG,uBAAGC,KAAK,4CAA4CC,OAAO,UAA3D,WACH,2BAAG,uBAAGD,KAAK,kCAAkCC,OAAO,UAAjD,YAEL,yBAAKL,GAAG,uBACN,qCACA,wBAAIA,GAAG,gBACL,4BAAI,kBAAC,IAAD,CAAMG,GAAG,KAAT,oBACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,KAAT,sBAGR,yBAAKH,GAAG,cAAcC,MAAO,CAAEC,gBAAgB,QAAD,OAAUJ,EAAV,W,OCpBnC,G,YAAA,kBACb,yBAAKE,GAAG,iBACN,4BAAQM,IAAI,qJCFD,oBACb,6BAASP,UAAU,oBACjB,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,UAAUC,UAAWC,MCQ5BC,MATf,WACE,OACE,yBAAKZ,UAAU,eACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd360f70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gg_bridge.e8a122bd.png\";","module.exports = __webpack_public_path__ + \"static/media/uss_constitution.ccba7dc6.png\";","module.exports = __webpack_public_path__ + \"static/media/tim_harding_resume.7ff82994.pdf\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nconst gg = require('../images/gg_bridge.png');\nconst uss = require('../images/uss_constitution.png');\n\nexport default () => (\n  <header className=\"application-header\">\n    <div id=\"gg-overlay\" style={{ backgroundImage: `url(\"${gg}\")` }} />\n    <div className=\"header-wordmark\">\n      <h1><Link to=\"/\">Tim Harding</Link></h1>\n      <p>Software Engineer</p>\n    </div>\n    <div id=\"header-buttons\">\n      <i><Link to=\"/resume\"></Link></i>\n      <i><a href=\"https://www.linkedin.com/in/timharding31/\" target=\"_blank\"></a></i>\n      <i><a href=\"https://github.com/timharding31\" target=\"_blank\"></a></i>\n    </div>\n    <div id=\"header-menu-trigger\">\n      <i></i>\n      <ul id=\"nav-dropdown\">\n        <li><Link to=\"/\">Placeholder One</Link></li>\n        <li><Link to=\"/\">Placeholder Two</Link></li>\n      </ul>\n    </div>\n    <div id=\"uss-overlay\" style={{ backgroundImage: `url(\"${uss}\")` }} />\n  </header>\n)","import React from 'react';\nimport { Document, Page } from 'react-pdf';\nimport resume from '../../files/tim_harding_resume.pdf';\n\nexport default () => (\n  <div id=\"resume-iframe\">\n    <iframe src=\"https://docs.google.com/document/d/e/2PACX-1vTKkAxJgVaDhi85_dFzRO3kOC9gu9WqT4wFq_2HSNZpWWOGFIseKEhkWiUaU_a4S_V6tjeFIYMt8qgt/pub?embedded=true\"></iframe>\n  </div>\n  // <Document\n  //   options={{ workerSrc: \"pdf.worker.js\" }}\n  //   file={resume}>\n  //   <Page pageNumber={1} />\n  // </Document>\n)\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Resume from './content/resume';\n\nexport default () => (\n  <section className=\"application-body\">\n    <Route exact path=\"/resume\" component={Resume} />\n  </section>\n)","import React from 'react';\nimport './application.scss';\nimport Header from './components/header';\nimport Main from './components/main';\n\nfunction App() {\n  return (\n    <div className=\"application\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}